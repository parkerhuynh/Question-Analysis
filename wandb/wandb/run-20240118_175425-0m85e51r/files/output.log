sample number: 96169
output_dim: 8
token_size: 7057
ans_type_to_idx: {'yes/no': 0, 'action': 1, 'object': 2, 'location': 3, 'other': 4, 'color': 5, 'human': 6, 'number': 7}
sample number: 18473
output_dim: 8
token_size: 7057
ans_type_to_idx: {'yes/no': 0, 'action': 1, 'object': 2, 'location': 3, 'other': 4, 'color': 5, 'human': 6, 'number': 7}
[[ 0.48409   0.33505   0.42066  ... -1.7047   -0.62474   0.69989 ]
 [ 0.14354   0.057574  0.070036 ... -0.057567 -0.037463  0.060437]
 [-7.1395   -2.4339   -2.5181   ... -4.8147   -5.1779    6.7697  ]
 ...
 [ 3.9665   -0.4368   -4.9797   ...  1.2008   -2.9568    2.8831  ]
 [-1.0742    0.28313  -1.0317   ...  2.0254   -1.347     0.38743 ]
 [ 1.2023   -1.0608   -0.7661   ...  2.0222    2.6343    3.7644  ]]
FullyShardedDataParallel(
  (_fsdp_wrapped_module): FlattenParamsWrapper(
    (_fpw_module): Net(
      (word_embeddings): FullyShardedDataParallel(
        (_fsdp_wrapped_module): FlattenParamsWrapper(
          (_fpw_module): Embedding(7057, 300)
        )
      )
      (question_encoder): QuestionEmbedding(
        (lstm): FullyShardedDataParallel(
          (_fsdp_wrapped_module): FlattenParamsWrapper(
            (_fpw_module): LSTM(300, 1024, num_layers=2, batch_first=True, bidirectional=True)
          )
        )
        (fc): FullyShardedDataParallel(
          (_fsdp_wrapped_module): FlattenParamsWrapper(
            (_fpw_module): Linear(in_features=2048, out_features=1024, bias=True)
          )
        )
      )
      (qt_header): Sequential(
        (0): FullyShardedDataParallel(
          (_fsdp_wrapped_module): FlattenParamsWrapper(
            (_fpw_module): Linear(in_features=2048, out_features=1000, bias=True)
          )
        )
        (1): Dropout(p=0.5, inplace=False)
        (2): Tanh()
        (3): Linear(in_features=1000, out_features=8, bias=True)
      )
    )
  )
)
/home/ndhuynh/.conda/envs/hie/lib/python3.9/site-packages/torch/nn/modules/rnn.py:769: UserWarning: RNN module weights are not part of single contiguous chunk of memory. This means they need to be compacted at every call, possibly greatly increasing memory usage. To compact weights again call flatten_parameters(). (Triggered internally at  /opt/conda/conda-bld/pytorch_1659484775609/work/aten/src/ATen/native/cudnn/RNN.cpp:968.)
  result = _VF.lstm(input, hx, self._flat_weights, self.bias, self.num_layers,